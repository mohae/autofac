// automatically generated by the FlatBuffers compiler, do not modify

package conf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)
type SysInf struct {
	_tab flatbuffers.Table
}

func GetRootAsSysInf(buf []byte, offset flatbuffers.UOffsetT) *SysInf {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SysInf{}
	x.Init(buf, n + offset)
	return x
}

func (rcv *SysInf) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SysInf) CPU() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SysInf) CPUFlags() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SysInf) Mem() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SysInf) NetInf() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func SysInfStart(builder *flatbuffers.Builder) { builder.StartObject(4) }
func SysInfAddCPU(builder *flatbuffers.Builder, CPU byte) { builder.PrependByteSlot(0, CPU, 0) }
func SysInfAddCPUFlags(builder *flatbuffers.Builder, CPUFlags byte) { builder.PrependByteSlot(1, CPUFlags, 0) }
func SysInfAddMem(builder *flatbuffers.Builder, Mem byte) { builder.PrependByteSlot(2, Mem, 0) }
func SysInfAddNetInf(builder *flatbuffers.Builder, NetInf byte) { builder.PrependByteSlot(3, NetInf, 0) }
func SysInfEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT { return builder.EndObject() }
